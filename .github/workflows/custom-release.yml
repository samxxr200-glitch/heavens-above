name: Custom Release Workflow

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  release-prep:
    name: Release Preparation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Install dependencies
      run: npm install
    
    - name: Run pre-release tests
      run: npm test
    
    - name: Generate changelog
      id: changelog
      run: |
        echo "ðŸ“‹ Generating changelog..."
        
        # Get latest tag or use initial commit
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$LATEST_TAG" ]; then
          echo "No previous tags found. Including all commits."
          git log --oneline --pretty=format:"- %s" > changelog.md
        else
          echo "Changes since $LATEST_TAG:"
          git log --oneline --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD > changelog.md
        fi
        
        # Count changes for summary
        CHANGE_COUNT=$(wc -l < changelog.md | tr -d ' ')
        echo "change_count=$CHANGE_COUNT" >> $GITHUB_OUTPUT
        
        cat changelog.md

  version-bump:
    name: Version Bump
    runs-on: ubuntu-latest
    needs: release-prep
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Calculate new version
      id: version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        IFS='.' read -ra VER <<< "$CURRENT_VERSION"
        
        case "${{ github.event.inputs.release-type }}" in
          major)
            NEW_VERSION="$((VER[0]+1)).0.0"
            ;;
          minor)
            NEW_VERSION="${VER[0]}.$((VER[1]+1)).0"
            ;;
          patch)
            NEW_VERSION="${VER[0]}.${VER[1]}.$((VER[2]+1))"
            ;;
        esac
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo " Bumping version: $CURRENT_VERSION â†’ $NEW_VERSION"
    
    - name: Update version in package.json
      run: |
        npm version ${{ steps.version.outputs.new_version }} --no-git-tag-version
    
    - name: Commit version bump
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json
        git commit -m "chore: Bump version to ${{ steps.version.outputs.new_version }}"
        git push

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [release-prep, version-bump]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download changelog
      uses: actions/download-artifact@v4
      with:
        name: changelog
        path: ./
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.version-bump.outputs.new_version || github.ref_name }}
        name: Release v${{ needs.version-bump.outputs.new_version || github.ref_name }}
        body: |
          #  Release v${{ needs.version-bump.outputs.new_version || github.ref_name }}
          
          ## Changes in this release:
          $(cat changelog.md)
          
          ##  Release Details:
          - **Total Changes**: ${{ needs.release-prep.outputs.change_count }} commits
          - **Release Type**: ${{ github.event.inputs.release-type || 'tag' }}
          - **Timestamp**: $(date -u)
          
          _This release was automatically generated by GitHub Actions._
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  post-release:
    name: Post Release Tasks
    runs-on: ubuntu-latest
    needs: create-release
    if: always()
    
    steps:
    - name: Generate release summary
      run: |
        echo " Release Summary" > release-summary.md
        echo "=================" >> release-summary.md
        echo "" >> release-summary.md
        echo "**Release**: v${{ needs.version-bump.outputs.new_version || github.ref_name }}" >> release-summary.md
        echo "**Status**: ${{ job.status }}" >> release-summary.md
        echo "**Timestamp**: $(date -u)" >> release-summary.md
        echo "" >> release-summary.md
        echo "All release tasks completed successfully!" >> release-summary.md
        
        cat release-summary.md
    
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: |
          release-summary.md
          changelog.md
        retention-days: 30
